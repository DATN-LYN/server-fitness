# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Query {
  getSupport(supportId: String!): ISupport!
  getSupports(queryParams: QueryFilterDto!): ISupports!
  getMySupports(queryParams: QueryFilterDto!): ISupports!
  getUnReadSupports: Float!
  getUserProgram(id: String!): IUserProgram!
  getUserPrograms(queryParams: QueryFilterDto!): IUserPrograms!
  getMyUserPrograms(queryParams: QueryFilterDto!): IUserPrograms!
  getUserExercise(id: String!): IUserExercise!
  getUserExercises(queryParams: QueryFilterDto!): IUserExercises!
  getMyUserExercises(queryParams: QueryFilterDto!): IUserExercises!
  getStats(statsId: String!): IUserStatistics!
  getStatsList(queryParams: QueryFilterDto!): IUserStatisticses!
  getMyStats(queryParams: QueryFilterDto!): IUserStatisticses!
  getUserStats(queryParams: QueryFilterDto!, userId: String!): IUserStatisticses!
  getExercise(exerciseId: String!): IExercise!
  getExercises(queryParams: QueryFilterDto!): IExercises!
  loginGoogle(input: LoginInputDto!): LoginResponseDto!
  login(input: LoginInputDto!): LoginResponseDto!
  refreshToken(refreshToken: String!): RefreshTokenResponseDto!
  getInbox(inboxId: String!): IInbox!
  getInboxes(queryParams: QueryFilterDto!): IInboxes!
  getMyInboxes(queryParams: QueryFilterDto!): IInboxes!
  getCategory(categoryId: String!): Category!
  getCategories(queryParams: QueryFilterDto!): ICategories!
  getProgram(programId: String!): Program!
  getHomeOverview: ISummary!
  getPrograms(queryParams: QueryFilterDto!): IPrograms!
  getUser(userId: String!): IUser!
  getCurrentUser: IUser!
  getUsers(queryParams: QueryFilterDto!): IUsers!
  getTopUsersProgram(queryParams: QueryFilterDto!): IUsers!
  getTopUsersInbox(queryParams: QueryFilterDto!): IUsers!
}

type ISupport {
  id: String!
  userId: String
  user: User
  content: String
  imgUrl: String
  isRead: Boolean
  status: SUPPORT_STATUS
  createdAt: DateTime
  updatedAt: DateTime
}

type User {
  id: String!
  email: String!
  countProgram: Float
  countInbox: Float
  fullName: String
  password: String!
  googleId: String
  avatar: String
  age: Float
  refreshToken: String
  roleId: String
  isActive: Boolean
  role: Role
  inboxes: [Inbox!]
  userPrograms: [UserProgram!]
  userExercises: [UserExercise!]
  gender: GENDER
  userRole: ROLE
  createdAt: DateTime
  updatedAt: DateTime
}

type Role {
  id: String!
  name: String!
}

type Inbox {
  id: ID
  message: String
  isSender: Boolean!
  userId: String!
  user: User
  createdAt: DateTime
  updatedAt: DateTime
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type UserProgram {
  id: ID
  userId: String!
  programId: String!
  isFavorite: Boolean!
  user: User
  program: Program
  createdAt: DateTime
  updatedAt: DateTime
}

type Program {
  id: ID
  name: String
  view: Float
  description: String
  imgUrl: String
  categoryId: String!
  category: Category
  createdAt: DateTime
  updatedAt: DateTime
  level: WORKOUT_LEVEL
  bodyPart: BODY_PART
}

type Category {
  id: ID
  name: String
  imgUrl: String
  createdAt: DateTime
  updatedAt: DateTime
}

enum WORKOUT_LEVEL {
  Beginner
  Intermediate
  Advanced
}

enum BODY_PART {
  Upper
  Downer
  ABS
  FullBody
}

type UserExercise {
  id: ID
  userId: String!
  exerciseId: String!
  user: User
  exercise: Exercise
  createdAt: DateTime
  updatedAt: DateTime
}

type Exercise {
  id: ID
  name: String
  duration: Float
  videoUrl: String
  imgUrl: String
  calo: Float
  programId: String!
  program: Program
  createdAt: DateTime
  updatedAt: DateTime
}

enum GENDER {
  Male
  Female
  Others
}

enum ROLE {
  Admin
  User
}

enum SUPPORT_STATUS {
  Waiting
  Solving
  Done
  Canceled
}

type ISupports {
  meta: Meta
  items: [Support!]
}

type Meta {
  totalItems: Float
  itemCount: Float
  itemsPerPage: Float
  totalPages: Float
  currentPage: Float
}

type Support {
  id: String!
  userId: String
  user: User
  content: String
  imgUrl: String
  isRead: Boolean
  status: SUPPORT_STATUS
  createdAt: DateTime
  updatedAt: DateTime
}

input QueryFilterDto {
  limit: Float
  page: Float
  orderBy: String
  filters: [FilterDto!]
}

input FilterDto {
  field: String
  data: String
  operator: FILTER_OPERATOR
}

enum FILTER_OPERATOR {
  eq
  like
  in
  lt
  gt
}

type IUserProgram {
  id: ID
  userId: String!
  programId: String!
  isFavorite: Boolean!
  user: User
  program: Program
  createdAt: DateTime
  updatedAt: DateTime
}

type IUserPrograms {
  meta: Meta
  items: [UserProgram!]
}

type IUserExercise {
  id: ID
  userId: String!
  exerciseId: String!
  user: User
  exercise: Exercise
  createdAt: DateTime
  updatedAt: DateTime
}

type IUserExercises {
  meta: Meta
  items: [UserExercise!]
}

type IUserStatistics {
  id: ID
  userId: String!
  programCount: Float
  caloCount: Float
  durationCount: Float
  user: User
  createdAt: DateTime
  updatedAt: DateTime
}

type IUserStatisticses {
  meta: Meta
  items: [UserStatistics!]
}

type UserStatistics {
  id: ID
  userId: String!
  programCount: Float
  caloCount: Float
  durationCount: Float
  user: User
  createdAt: DateTime
  updatedAt: DateTime
}

type IExercise {
  id: ID
  name: String
  duration: Float
  videoUrl: String
  imgUrl: String
  calo: Float
  programId: String!
  program: Program
  createdAt: DateTime
  updatedAt: DateTime
}

type IExercises {
  meta: Meta
  items: [Exercise!]
}

type LoginResponseDto {
  id: String!
  user: User
  accessToken: String
  refreshToken: String
}

input LoginInputDto {
  accessToken: String
  expiresIn: String
  token: String
  email: String
  password: String
}

type RefreshTokenResponseDto {
  token: String!
}

type IInbox {
  id: ID
  message: String
  isSender: Boolean!
  userId: String!
  user: User
  createdAt: DateTime
  updatedAt: DateTime
}

type IInboxes {
  meta: Meta
  items: [Inbox!]
}

type ICategories {
  meta: Meta
  items: [Category!]
}

type ISummary {
  userCnt: Float
  programCnt: Float
  exerciseCnt: Float
  categoryCnt: Float
}

type IPrograms {
  meta: Meta
  items: [Program!]
}

type IUser {
  id: String!
  email: String!
  countProgram: Float
  countInbox: Float
  fullName: String
  password: String!
  googleId: String
  avatar: String
  age: Float
  refreshToken: String
  roleId: String
  isActive: Boolean
  role: Role
  inboxes: [Inbox!]
  userPrograms: [UserProgram!]
  userExercises: [UserExercise!]
  gender: GENDER
  userRole: ROLE
  createdAt: DateTime
  updatedAt: DateTime
}

type IUsers {
  meta: Meta
  items: [User!]
}

type Mutation {
  upsertSupport(input: UpsertSupportInputDto!): ISupport!
  deleteSupport(supportId: String!): ResponseMessageBase!
  upsertUserProgram(input: UpsertUserProgramInputDto!): IUserProgram!
  deleteUserProgram(id: String!): ResponseMessageBase!
  upsertUserExercise(input: UpsertUserExerciseInputDto!): IUserExercise!
  deleteUserExercise(id: String!): ResponseMessageBase!
  upsertStats(input: UpsertUserStatisticsInputDto!): IUserStatistics!
  deleteStats(statsId: String!): ResponseMessageBase!
  upsertExercise(input: UpsertExerciseInputDto!): IExercise!
  deleteExercise(exerciseId: String!): ResponseMessageBase!
  register(input: RegisterInputDto!): ResponseMessageBase!
  logout(userId: String!): ResponseMessageBase!
  changePassword(input: ChangePasswordInputDto!): ResponseMessageBase!
  upsertInbox(input: UpsertInboxInputDto!): IInbox!
  deleteInbox(inboxId: String!): ResponseMessageBase!
  upsertCategory(input: UpsertCategoryInputDto!): ICategory!
  deleteCategory(categoryId: String!): ResponseMessageBase!
  upsertProgram(input: UpsertProgramInputDto!): IProgram!
  deleteProgram(programId: String!): ResponseMessageBase!
  deleteUser(userId: String!): ResponseMessageBase!
  upsertUser(input: UpsertUserInputDto!): IUser!
}

input UpsertSupportInputDto {
  id: ID
  userId: String
  content: String
  imgUrl: String
  isRead: Boolean
  status: SUPPORT_STATUS
}

type ResponseMessageBase {
  message: String!
  success: Boolean!
}

input UpsertUserProgramInputDto {
  id: ID
  userId: String!
  programId: String!
  isFavorite: Boolean
}

input UpsertUserExerciseInputDto {
  id: ID
  userId: String!
  exerciseId: String!
}

input UpsertUserStatisticsInputDto {
  id: ID
  userId: String!
  programCount: Float!
  caloCount: Float!
  durationCount: Float!
}

input UpsertExerciseInputDto {
  id: ID
  name: String!
  imgUrl: String!
  duration: Float!
  videoUrl: String!
  calo: Float!
  programId: String!
}

input RegisterInputDto {
  email: String!
  password: String!
  avatar: String
  age: Float!
  fullName: String!
  gender: GENDER
  userRole: ROLE
  isActive: Boolean
}

input ChangePasswordInputDto {
  oldPassword: String
  newPassword: String
}

input UpsertInboxInputDto {
  id: ID
  message: String!
  userId: String!
  isSender: Boolean!
}

type ICategory {
  id: ID
  name: String
  imgUrl: String
  createdAt: DateTime
  updatedAt: DateTime
}

input UpsertCategoryInputDto {
  id: ID
  name: String!
  imgUrl: String!
}

type IProgram {
  id: ID
  name: String
  view: Float
  description: String
  imgUrl: String
  categoryId: String!
  category: Category
  createdAt: DateTime
  updatedAt: DateTime
  level: WORKOUT_LEVEL
  bodyPart: BODY_PART
}

input UpsertProgramInputDto {
  id: ID
  name: String!
  level: WORKOUT_LEVEL
  bodyPart: BODY_PART
  description: String!
  imgUrl: String!
  categoryId: String!
  view: Float!
}

input UpsertUserInputDto {
  id: ID
  fullName: String!
  avatar: String!
  email: String!
  age: Float!
  isActive: Boolean
  gender: GENDER
  userRole: ROLE
}